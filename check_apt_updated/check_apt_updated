#!/bin/bash
#
# License: The BSD 3-Clause License
#
# Copyright (c) 2014, Johan Ryberg
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without 
# modification, are permitted provided that the following conditions are met:
# 
# 1. Redistributions of source code must retain the above copyright notice, 
#  this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright notice,
#  this list of conditions and the following disclaimer in the documentation
#  and/or other materials provided with the distribution.
# 
# 3. Neither the name of the copyright holder nor the names of its contributors
#  may be used to endorse or promote products derived from this software without
#  specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.
#
# check_apt_updated
# Plugin for NRPE (Nagios Remote Plugin Executor) for Debian/Ubuntu to check
# when APT was able to update the software database last time
# Web: https://github.com/jryberg/nagios-plugins

APPNAME=`basename $0`
VERSION="1.0"

# Defining standard messages and exit error levels
# https://nagios-plugins.org/doc/guidelines.html
OK_EXIT=0
WARNING_EXIT=1
CRITICAL_EXIT=2
UNKNOWN_EXIT=3
OK_MSG="OK"
WARNING_MSG="Warning"
CRITICAL_MSG="Critical"
UNKNOWN_MSG="Unknown"

# Using Unknown as default
EXIT_CODE=$UNKNOWN_EXIT
EXIT_MSG=$UNKNOWN_MSG

# Setting default warning to 2 days and critical to 4 days
WARNING_LEVEL=172800
CRITICAL_LEVEL=345600

# Path to update-success-stam used by apt
STAMP_PATH="/var/lib/apt/periodic/update-success-stamp"

# Function to explain how to use the program
function_usage () {
cat - <<EOF
Usage: ${appname} [--help]
Usage: ${appname} [-w warn] [-c crit]

This check command checks number of seconds since Debian/Ubuntu APT database
was successfully updated

 --help
    Show this help
 -V, --version
    Show version
 -w
    Warning level in seconds since last successful update
 -c
    Critical level in seconds since last successful update

Example:
${APPNAME} -w 172800 -c 345600

EOF
}

# Process arguments
while [ $# -gt 0 ]
    do
        OPT="$1"
            case "$OPT" in
                --help)
                    function_usage
                    exit $OK_EXIT
                ;;
                -w)
                    WARNING_LEVEL="${2}"
                    shift 2
                ;;
                -c)
                    CRITICAL_LEVEL="${2}"
                    shift 2
                ;;
                --version|-V)
                    echo "${APPNAME} ${VERSION}"
                    exit $OK_EXIT
                ;;
                *)
                    echo "${APPNAME}: invalid option '${1}'"
                    echo "Try '${APPNAME} --help' for more information."
                    exit $UNKNOWN_EXIT
                ;;
    esac
done

# Checking if update-success-stam exist, if not exit with Unknown
if [ ! -f "$STAMP_PATH" ]; then
        echo "$UNKNOWN_MSG: update-success-stamp was not found. Is this Debian/Ubuntu?"
        exit $UNKNOWN_EXIT
fi

# Get latest time in Unix format since the file was modified last time
LAST_SUCCESS=`stat -c %Y $STAMP_PATH`

# Get current time in Unix format
NOW=`date +%s`

# If last success are bigger than now, the time must be wrong
if [ $LAST_SUCCESS -gt $NOW ]; then
    echo "$UNKNOWN_MSG: Last access was in the future, should not be possible. Please correct server time"
    exit $UNKNOWN_EXIT
fi

# Make sure warning and critical levels are integers
if [[ ! $WARNING_LEVEL =~ ^[0-9]+$ ]] || [[ ! $CRITICAL_LEVEL =~ ^[0-9]+$ ]]; then
    echo "${APPNAME}: Warning and Critical level must be positive integer"
    exit $UNKNOWN_EXIT
    
fi

# How many seconds was it since last success?
SECONDS_SINCE_LAST_UPDATE=$(($NOW-$LAST_SUCCESS))

# If critical level are greater than seconds since last success we should exit with Critical exit code
if [ $SECONDS_SINCE_LAST_UPDATE -gt $CRITICAL_LEVEL ]; then
    EXIT_CODE=$CRITICAL_EXIT
    EXIT_MSG=$CRITICAL_MSG
# If warning level are greater than seconds since last success we should exit with Warning exit code
elif [ $SECONDS_SINCE_LAST_UPDATE -gt $WARNING_LEVEL ]; then
    EXIT_CODE=$WARNING_EXIT
    EXIT_MSG=$WARNING_MSG
# If both critical and warning level are less than seconds since last success we shoud exit with OK exit code
else
    EXIT_CODE=$OK_EXIT
    EXIT_MSG=$OK_MSG
fi

# Echo message and exit
echo "$EXIT_MSG: Updated "$SECONDS_SINCE_LAST_UPDATE" seconds ago|'Last updated'=${SECONDS_SINCE_LAST_UPDATE}s;${WARNING_LEVEL};${CRITICAL_LEVEL};0"
exit $EXIT_CODE
